name: QoderResume CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Security Checks
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Security audit
        run: npm audit --audit-level=moderate

  # Unit & Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: quality-check
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: qoder_resume_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:test_password@localhost:5432/qoder_resume_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "JWT_SECRET=test_jwt_secret" >> .env.test
          echo "NEXTAUTH_SECRET=test_nextauth_secret" >> .env.test

      - name: Run backend tests
        run: npm run test:backend
        env:
          NODE_ENV: test

      - name: Run frontend tests
        run: npm run test:frontend

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: qoder_resume_e2e
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: e2e_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup E2E environment
        run: |
          cp .env.example .env.e2e
          echo "DATABASE_URL=postgresql://postgres:e2e_password@localhost:5432/qoder_resume_e2e" >> .env.e2e
          echo "REDIS_URL=redis://localhost:6379" >> .env.e2e
          echo "JWT_SECRET=e2e_jwt_secret" >> .env.e2e
          echo "NEXTAUTH_SECRET=e2e_nextauth_secret" >> .env.e2e
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env.e2e

      - name: Run database migrations
        run: npm run migration:run
        env:
          NODE_ENV: test

      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: test

      - name: Wait for application
        run: npx wait-on http://localhost:3000 http://localhost:3001/health --timeout 60000

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Load Testing (Performance Validation)
  load-testing:
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: qoder_resume_load
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: load_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install K6
        run: |
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Setup load testing environment
        run: |
          cp .env.example .env.load
          echo "DATABASE_URL=postgresql://postgres:load_password@localhost:5432/qoder_resume_load" >> .env.load
          echo "REDIS_URL=redis://localhost:6379" >> .env.load
          echo "JWT_SECRET=load_jwt_secret" >> .env.load
          echo "NEXTAUTH_SECRET=load_nextauth_secret" >> .env.load
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env.load

      - name: Run database migrations
        run: npm run migration:run
        env:
          NODE_ENV: production

      - name: Start application for load testing
        run: npm run start &
        env:
          NODE_ENV: production

      - name: Wait for application
        run: npx wait-on http://localhost:3000 http://localhost:3001/health --timeout 60000

      - name: Run component load tests
        run: cd load-testing && chmod +x scripts/run-tests.sh && ./scripts/run-tests.sh --type component

      - name: Run integration load tests
        run: cd load-testing && ./scripts/run-tests.sh --type integration

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: load-testing/reports/
          retention-days: 30

  # Build & Deploy
  build-deploy:
    runs-on: ubuntu-latest
    needs: [quality-check, test, e2e-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Add deployment steps here based on your deployment target
      # - name: Deploy to staging/production
      #   run: echo "Deploy to your environment here"

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript